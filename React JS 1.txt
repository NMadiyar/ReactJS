1) В реакте чтобы создать нужны компоненты всегда, чтобы они работали нужно всегда импортировать их, в случае если будем использовать JSX import React from 'react'
2) 2 Правило вы всегда должны экспортировать функцию, в этом случае export default function НазваниеФункции(){}, как принято в реакте, компоменты которые мы создаем начинаются
с большой буквы. Это обычная функция, которая должна вернуть какой-то JSX код
3) Чтобы заработал этот компонент, нужно в app.js ввести import Название компонента from ' ./локация/названиекомпонента ' import TodoList from './todo/TodoList.js' и дальше
ввести его в function App как отдельный тег <TodoList />
4) <ul> получился со стилями, мы можем избавиться от родных стилей, для этого существует несколько способов, но при работе с реакт, нужно выбрать один единственный
5) Заходим во вкладку с компонентой и создаем переменную const styles = { ul: { listStyle: 'none' } при работе с JS, чтобы обратиться к стилям, мы пишем не через дефис
а через камелкейс, этот стиль не применится, поэтому нужно указать что мы определяем его к какому-то элементу
6) Находим какому тегу мы хотим применить данный стиль, <ul style={styles.ul}> в JSX аттрибуты задаются в одинарных кавычках
7) Cоздаем новую компоненту, не забываем указывать import React  from 'react', так же пишем export default function () и можно новую компоненту импортировать в другую компоненту
для этого надо написать в другой компоненте import TodoItem from "./TodoItem" и в JSX этого компонента указать уже не <li></li>, а название компонента <TodoItem/> и он перенесет
данные из другой компоненты
8) Компонентам можно задать параметры для этого просто рядом написать любое название параметра
9) Для работы с циклами, мы можем JSX дать понять что сейчас будет JS и оборачиваем его в {} 
10) Чтобы react не выдавал ошибку, нужно всегда прописывать key, он в свою очередь является уникальным идентификатором
11)Прописываем в терминале npm install prop-types, устанавливаем и пишем снова npm start
12)Далее прописываем import PropTypes from 'prop-types'; убираем export default и ставим его в конец и добавляем export default НазваниеФункции
13)НазваниеФункции.propTypes = { todos: PropTypes.array.isRequired  } валидация параметров нужна для облегчения разработки, чтобы не смешивать типы данных